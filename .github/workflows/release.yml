name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like v1.0.0

jobs:
  build:
    name: Build and Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build project
        run: cargo build --release

      - name: Prepare artifact
        id: prep
        shell: bash
        run: |
          BINARY_NAME=rdslink
          OS="${{ runner.os }}"
          EXT=""
          ARTIFACT_NAME=""

          if [[ "$OS" == "Windows" ]]; then
            EXT=".exe"
            ARTIFACT_NAME="${BINARY_NAME}-windows${EXT}"
            cp "target/release/${BINARY_NAME}${EXT}" "$ARTIFACT_NAME"
          else
            # Normalize OS name for filename (macOS/Linux)
            OS_LOWER=$(echo "$OS" | tr '[:upper:]' '[:lower:]')
            STAGING="staging"
            mkdir -p "$STAGING"
            cp "target/release/${BINARY_NAME}${EXT}" "$STAGING/${BINARY_NAME}"
            chmod +x "$STAGING/${BINARY_NAME}"
            ARTIFACT_NAME="${BINARY_NAME}-${OS_LOWER}.tar.gz"
            tar -czvf "$ARTIFACT_NAME" -C "$STAGING" "${BINARY_NAME}"
          fi

          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.artifact_name }}
          path: ${{ steps.prep.outputs.artifact_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
